// AUTO-GENERATED USING zydis-bindgen!

#[cfg(feature = "serialization")]
use serde::{Deserialize, Serialize};

/// Defines the `ZydisInstructionCategory` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum InstructionCategory {
    INVALID = 0,
    ADOX_ADCX = 1,
    AES = 2,
    AMD3DNOW = 3,
    AMX_TILE = 4,
    AVX = 5,
    AVX2 = 6,
    AVX2GATHER = 7,
    AVX512 = 8,
    AVX512_4FMAPS = 9,
    AVX512_4VNNIW = 10,
    AVX512_BITALG = 11,
    AVX512_VBMI = 12,
    AVX512_VP2INTERSECT = 13,
    AVX_IFMA = 14,
    BINARY = 15,
    BITBYTE = 16,
    BLEND = 17,
    BMI1 = 18,
    BMI2 = 19,
    BROADCAST = 20,
    CALL = 21,
    CET = 22,
    CLDEMOTE = 23,
    CLFLUSHOPT = 24,
    CLWB = 25,
    CLZERO = 26,
    CMOV = 27,
    COMPRESS = 28,
    COND_BR = 29,
    CONFLICT = 30,
    CONVERT = 31,
    DATAXFER = 32,
    DECIMAL = 33,
    ENQCMD = 34,
    EXPAND = 35,
    FCMOV = 36,
    FLAGOP = 37,
    FMA4 = 38,
    FP16 = 39,
    GATHER = 40,
    GFNI = 41,
    HRESET = 42,
    IFMA = 43,
    INTERRUPT = 44,
    IO = 45,
    IOSTRINGOP = 46,
    KEYLOCKER = 47,
    KEYLOCKER_WIDE = 48,
    KMASK = 49,
    KNC = 50,
    KNCMASK = 51,
    KNCSCALAR = 52,
    LEGACY = 53,
    LOGICAL = 54,
    LOGICAL_FP = 55,
    LZCNT = 56,
    MISC = 57,
    MMX = 58,
    MOVDIR = 59,
    MPX = 60,
    MSRLIST = 61,
    NOP = 62,
    PADLOCK = 63,
    PBNDKB = 64,
    PCLMULQDQ = 65,
    PCOMMIT = 66,
    PCONFIG = 67,
    PKU = 68,
    POP = 69,
    PREFETCH = 70,
    PREFETCHWT1 = 71,
    PT = 72,
    PUSH = 73,
    RDPID = 74,
    RDPRU = 75,
    RDRAND = 76,
    RDSEED = 77,
    RDWRFSGS = 78,
    RET = 79,
    ROTATE = 80,
    SCATTER = 81,
    SEGOP = 82,
    SEMAPHORE = 83,
    SERIALIZE = 84,
    SETCC = 85,
    SGX = 86,
    SHA = 87,
    SHA512 = 88,
    SHIFT = 89,
    SMAP = 90,
    SSE = 91,
    STRINGOP = 92,
    STTNI = 93,
    SYSCALL = 94,
    SYSRET = 95,
    SYSTEM = 96,
    TBM = 97,
    TSX_LDTRK = 98,
    UFMA = 99,
    UINTR = 100,
    UNCOND_BR = 101,
    VAES = 102,
    VBMI2 = 103,
    VEX = 104,
    VFMA = 105,
    VPCLMULQDQ = 106,
    VTX = 107,
    WAITPKG = 108,
    WIDENOP = 109,
    WRMSRNS = 110,
    X87_ALU = 111,
    XOP = 112,
    XSAVE = 113,
    XSAVEOPT = 114,
}

pub const CATEGORY_MAX_VALUE: usize = 114;

/// Defines the `ZydisISASet` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum ISASet {
    INVALID = 0,
    ADOX_ADCX = 1,
    AES = 2,
    AMD = 3,
    AMD3DNOW = 4,
    AMD_INVLPGB = 5,
    AMX_BF16 = 6,
    AMX_FP16 = 7,
    AMX_INT8 = 8,
    AMX_TILE = 9,
    AVX = 10,
    AVX2 = 11,
    AVX2GATHER = 12,
    AVX512BW_128 = 13,
    AVX512BW_128N = 14,
    AVX512BW_256 = 15,
    AVX512BW_512 = 16,
    AVX512BW_KOP = 17,
    AVX512CD_128 = 18,
    AVX512CD_256 = 19,
    AVX512CD_512 = 20,
    AVX512DQ_128 = 21,
    AVX512DQ_128N = 22,
    AVX512DQ_256 = 23,
    AVX512DQ_512 = 24,
    AVX512DQ_KOP = 25,
    AVX512DQ_SCALAR = 26,
    AVX512ER_512 = 27,
    AVX512ER_SCALAR = 28,
    AVX512F_128 = 29,
    AVX512F_128N = 30,
    AVX512F_256 = 31,
    AVX512F_512 = 32,
    AVX512F_KOP = 33,
    AVX512F_SCALAR = 34,
    AVX512PF_512 = 35,
    AVX512_4FMAPS_512 = 36,
    AVX512_4FMAPS_SCALAR = 37,
    AVX512_4VNNIW_512 = 38,
    AVX512_BF16_128 = 39,
    AVX512_BF16_256 = 40,
    AVX512_BF16_512 = 41,
    AVX512_BITALG_128 = 42,
    AVX512_BITALG_256 = 43,
    AVX512_BITALG_512 = 44,
    AVX512_FP16_128 = 45,
    AVX512_FP16_128N = 46,
    AVX512_FP16_256 = 47,
    AVX512_FP16_512 = 48,
    AVX512_FP16_SCALAR = 49,
    AVX512_GFNI_128 = 50,
    AVX512_GFNI_256 = 51,
    AVX512_GFNI_512 = 52,
    AVX512_IFMA_128 = 53,
    AVX512_IFMA_256 = 54,
    AVX512_IFMA_512 = 55,
    AVX512_VAES_128 = 56,
    AVX512_VAES_256 = 57,
    AVX512_VAES_512 = 58,
    AVX512_VBMI2_128 = 59,
    AVX512_VBMI2_256 = 60,
    AVX512_VBMI2_512 = 61,
    AVX512_VBMI_128 = 62,
    AVX512_VBMI_256 = 63,
    AVX512_VBMI_512 = 64,
    AVX512_VNNI_128 = 65,
    AVX512_VNNI_256 = 66,
    AVX512_VNNI_512 = 67,
    AVX512_VP2INTERSECT_128 = 68,
    AVX512_VP2INTERSECT_256 = 69,
    AVX512_VP2INTERSECT_512 = 70,
    AVX512_VPCLMULQDQ_128 = 71,
    AVX512_VPCLMULQDQ_256 = 72,
    AVX512_VPCLMULQDQ_512 = 73,
    AVX512_VPOPCNTDQ_128 = 74,
    AVX512_VPOPCNTDQ_256 = 75,
    AVX512_VPOPCNTDQ_512 = 76,
    AVXAES = 77,
    AVX_GFNI = 78,
    AVX_IFMA = 79,
    AVX_NE_CONVERT = 80,
    AVX_VNNI = 81,
    AVX_VNNI_INT16 = 82,
    AVX_VNNI_INT8 = 83,
    BMI1 = 84,
    BMI2 = 85,
    CET = 86,
    CLDEMOTE = 87,
    CLFLUSHOPT = 88,
    CLFSH = 89,
    CLWB = 90,
    CLZERO = 91,
    CMOV = 92,
    CMPXCHG16B = 93,
    ENQCMD = 94,
    F16C = 95,
    FAT_NOP = 96,
    FCMOV = 97,
    FCOMI = 98,
    FMA = 99,
    FMA4 = 100,
    FXSAVE = 101,
    FXSAVE64 = 102,
    GFNI = 103,
    HRESET = 104,
    I186 = 105,
    I286PROTECTED = 106,
    I286REAL = 107,
    I386 = 108,
    I486 = 109,
    I486REAL = 110,
    I86 = 111,
    ICACHE_PREFETCH = 112,
    INVPCID = 113,
    KEYLOCKER = 114,
    KEYLOCKER_WIDE = 115,
    KNCE = 116,
    KNCJKBR = 117,
    KNCSTREAM = 118,
    KNCV = 119,
    KNC_MISC = 120,
    KNC_PF_HINT = 121,
    LAHF = 122,
    LONGMODE = 123,
    LWP = 124,
    LZCNT = 125,
    MCOMMIT = 126,
    MONITOR = 127,
    MONITORX = 128,
    MOVBE = 129,
    MOVDIR = 130,
    MPX = 131,
    MSRLIST = 132,
    PADLOCK_ACE = 133,
    PADLOCK_PHE = 134,
    PADLOCK_PMM = 135,
    PADLOCK_RNG = 136,
    PAUSE = 137,
    PBNDKB = 138,
    PCLMULQDQ = 139,
    PCOMMIT = 140,
    PCONFIG = 141,
    PENTIUMMMX = 142,
    PENTIUMREAL = 143,
    PKU = 144,
    POPCNT = 145,
    PPRO = 146,
    PREFETCHWT1 = 147,
    PREFETCH_NOP = 148,
    PT = 149,
    RAO_INT = 150,
    RDPID = 151,
    RDPMC = 152,
    RDPRU = 153,
    RDRAND = 154,
    RDSEED = 155,
    RDTSCP = 156,
    RDWRFSGS = 157,
    RTM = 158,
    SERIALIZE = 159,
    SGX = 160,
    SGX_ENCLV = 161,
    SHA = 162,
    SHA512 = 163,
    SM3 = 164,
    SM4 = 165,
    SMAP = 166,
    SMX = 167,
    SNP = 168,
    SSE = 169,
    SSE2 = 170,
    SSE2MMX = 171,
    SSE3 = 172,
    SSE3X87 = 173,
    SSE4 = 174,
    SSE42 = 175,
    SSE4A = 176,
    SSEMXCSR = 177,
    SSE_PREFETCH = 178,
    SSSE3 = 179,
    SSSE3MMX = 180,
    SVM = 181,
    TBM = 182,
    TDX = 183,
    TSX_LDTRK = 184,
    UINTR = 185,
    VAES = 186,
    VMFUNC = 187,
    VPCLMULQDQ = 188,
    VTX = 189,
    WAITPKG = 190,
    WRMSRNS = 191,
    X87 = 192,
    XOP = 193,
    XSAVE = 194,
    XSAVEC = 195,
    XSAVEOPT = 196,
    XSAVES = 197,
}

pub const ISA_SET_MAX_VALUE: usize = 197;

/// Defines the `ZydisISAExt` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum ISAExt {
    INVALID = 0,
    ADOX_ADCX = 1,
    AES = 2,
    AMD3DNOW = 3,
    AMD3DNOW_PREFETCH = 4,
    AMD_INVLPGB = 5,
    AMX_BF16 = 6,
    AMX_FP16 = 7,
    AMX_INT8 = 8,
    AMX_TILE = 9,
    AVX = 10,
    AVX2 = 11,
    AVX2GATHER = 12,
    AVX512EVEX = 13,
    AVX512VEX = 14,
    AVXAES = 15,
    AVX_IFMA = 16,
    AVX_NE_CONVERT = 17,
    AVX_VNNI = 18,
    AVX_VNNI_INT16 = 19,
    AVX_VNNI_INT8 = 20,
    BASE = 21,
    BMI1 = 22,
    BMI2 = 23,
    CET = 24,
    CLDEMOTE = 25,
    CLFLUSHOPT = 26,
    CLFSH = 27,
    CLWB = 28,
    CLZERO = 29,
    ENQCMD = 30,
    F16C = 31,
    FMA = 32,
    FMA4 = 33,
    GFNI = 34,
    HRESET = 35,
    ICACHE_PREFETCH = 36,
    INVPCID = 37,
    KEYLOCKER = 38,
    KEYLOCKER_WIDE = 39,
    KNC = 40,
    KNCE = 41,
    KNCV = 42,
    LONGMODE = 43,
    LZCNT = 44,
    MCOMMIT = 45,
    MMX = 46,
    MONITOR = 47,
    MONITORX = 48,
    MOVBE = 49,
    MOVDIR = 50,
    MPX = 51,
    MSRLIST = 52,
    PADLOCK = 53,
    PAUSE = 54,
    PBNDKB = 55,
    PCLMULQDQ = 56,
    PCOMMIT = 57,
    PCONFIG = 58,
    PKU = 59,
    PREFETCHWT1 = 60,
    PT = 61,
    RAO_INT = 62,
    RDPID = 63,
    RDPRU = 64,
    RDRAND = 65,
    RDSEED = 66,
    RDTSCP = 67,
    RDWRFSGS = 68,
    RTM = 69,
    SERIALIZE = 70,
    SGX = 71,
    SGX_ENCLV = 72,
    SHA = 73,
    SHA512 = 74,
    SM3 = 75,
    SM4 = 76,
    SMAP = 77,
    SMX = 78,
    SNP = 79,
    SSE = 80,
    SSE2 = 81,
    SSE3 = 82,
    SSE4 = 83,
    SSE4A = 84,
    SSSE3 = 85,
    SVM = 86,
    TBM = 87,
    TDX = 88,
    TSX_LDTRK = 89,
    UINTR = 90,
    VAES = 91,
    VMFUNC = 92,
    VPCLMULQDQ = 93,
    VTX = 94,
    WAITPKG = 95,
    WRMSRNS = 96,
    X87 = 97,
    XOP = 98,
    XSAVE = 99,
    XSAVEC = 100,
    XSAVEOPT = 101,
    XSAVES = 102,
}

pub const ISA_EXT_MAX_VALUE: usize = 102;

/// Defines the `ZydisMnemonic` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum Mnemonic {
    INVALID = 0,
    AAA = 1,
    AAD = 2,
    AADD = 3,
    AAM = 4,
    AAND = 5,
    AAS = 6,
    ADC = 7,
    ADCX = 8,
    ADD = 9,
    ADDPD = 10,
    ADDPS = 11,
    ADDSD = 12,
    ADDSS = 13,
    ADDSUBPD = 14,
    ADDSUBPS = 15,
    ADOX = 16,
    AESDEC = 17,
    AESDEC128KL = 18,
    AESDEC256KL = 19,
    AESDECLAST = 20,
    AESDECWIDE128KL = 21,
    AESDECWIDE256KL = 22,
    AESENC = 23,
    AESENC128KL = 24,
    AESENC256KL = 25,
    AESENCLAST = 26,
    AESENCWIDE128KL = 27,
    AESENCWIDE256KL = 28,
    AESIMC = 29,
    AESKEYGENASSIST = 30,
    AND = 31,
    ANDN = 32,
    ANDNPD = 33,
    ANDNPS = 34,
    ANDPD = 35,
    ANDPS = 36,
    AOR = 37,
    ARPL = 38,
    AXOR = 39,
    BEXTR = 40,
    BLCFILL = 41,
    BLCI = 42,
    BLCIC = 43,
    BLCMSK = 44,
    BLCS = 45,
    BLENDPD = 46,
    BLENDPS = 47,
    BLENDVPD = 48,
    BLENDVPS = 49,
    BLSFILL = 50,
    BLSI = 51,
    BLSIC = 52,
    BLSMSK = 53,
    BLSR = 54,
    BNDCL = 55,
    BNDCN = 56,
    BNDCU = 57,
    BNDLDX = 58,
    BNDMK = 59,
    BNDMOV = 60,
    BNDSTX = 61,
    BOUND = 62,
    BSF = 63,
    BSR = 64,
    BSWAP = 65,
    BT = 66,
    BTC = 67,
    BTR = 68,
    BTS = 69,
    BZHI = 70,
    CALL = 71,
    CBW = 72,
    CDQ = 73,
    CDQE = 74,
    CLAC = 75,
    CLC = 76,
    CLD = 77,
    CLDEMOTE = 78,
    CLEVICT0 = 79,
    CLEVICT1 = 80,
    CLFLUSH = 81,
    CLFLUSHOPT = 82,
    CLGI = 83,
    CLI = 84,
    CLRSSBSY = 85,
    CLTS = 86,
    CLUI = 87,
    CLWB = 88,
    CLZERO = 89,
    CMC = 90,
    CMOVB = 91,
    CMOVBE = 92,
    CMOVL = 93,
    CMOVLE = 94,
    CMOVNB = 95,
    CMOVNBE = 96,
    CMOVNL = 97,
    CMOVNLE = 98,
    CMOVNO = 99,
    CMOVNP = 100,
    CMOVNS = 101,
    CMOVNZ = 102,
    CMOVO = 103,
    CMOVP = 104,
    CMOVS = 105,
    CMOVZ = 106,
    CMP = 107,
    CMPPD = 108,
    CMPPS = 109,
    CMPSB = 110,
    CMPSD = 111,
    CMPSQ = 112,
    CMPSS = 113,
    CMPSW = 114,
    CMPXCHG = 115,
    CMPXCHG16B = 116,
    CMPXCHG8B = 117,
    COMISD = 118,
    COMISS = 119,
    CPUID = 120,
    CQO = 121,
    CRC32 = 122,
    CVTDQ2PD = 123,
    CVTDQ2PS = 124,
    CVTPD2DQ = 125,
    CVTPD2PI = 126,
    CVTPD2PS = 127,
    CVTPI2PD = 128,
    CVTPI2PS = 129,
    CVTPS2DQ = 130,
    CVTPS2PD = 131,
    CVTPS2PI = 132,
    CVTSD2SI = 133,
    CVTSD2SS = 134,
    CVTSI2SD = 135,
    CVTSI2SS = 136,
    CVTSS2SD = 137,
    CVTSS2SI = 138,
    CVTTPD2DQ = 139,
    CVTTPD2PI = 140,
    CVTTPS2DQ = 141,
    CVTTPS2PI = 142,
    CVTTSD2SI = 143,
    CVTTSS2SI = 144,
    CWD = 145,
    CWDE = 146,
    DAA = 147,
    DAS = 148,
    DEC = 149,
    DELAY = 150,
    DIV = 151,
    DIVPD = 152,
    DIVPS = 153,
    DIVSD = 154,
    DIVSS = 155,
    DPPD = 156,
    DPPS = 157,
    EMMS = 158,
    ENCLS = 159,
    ENCLU = 160,
    ENCLV = 161,
    ENCODEKEY128 = 162,
    ENCODEKEY256 = 163,
    ENDBR32 = 164,
    ENDBR64 = 165,
    ENQCMD = 166,
    ENQCMDS = 167,
    ENTER = 168,
    EXTRACTPS = 169,
    EXTRQ = 170,
    F2XM1 = 171,
    FABS = 172,
    FADD = 173,
    FADDP = 174,
    FBLD = 175,
    FBSTP = 176,
    FCHS = 177,
    FCMOVB = 178,
    FCMOVBE = 179,
    FCMOVE = 180,
    FCMOVNB = 181,
    FCMOVNBE = 182,
    FCMOVNE = 183,
    FCMOVNU = 184,
    FCMOVU = 185,
    FCOM = 186,
    FCOMI = 187,
    FCOMIP = 188,
    FCOMP = 189,
    FCOMPP = 190,
    FCOS = 191,
    FDECSTP = 192,
    FDISI8087_NOP = 193,
    FDIV = 194,
    FDIVP = 195,
    FDIVR = 196,
    FDIVRP = 197,
    FEMMS = 198,
    FENI8087_NOP = 199,
    FFREE = 200,
    FFREEP = 201,
    FIADD = 202,
    FICOM = 203,
    FICOMP = 204,
    FIDIV = 205,
    FIDIVR = 206,
    FILD = 207,
    FIMUL = 208,
    FINCSTP = 209,
    FIST = 210,
    FISTP = 211,
    FISTTP = 212,
    FISUB = 213,
    FISUBR = 214,
    FLD = 215,
    FLD1 = 216,
    FLDCW = 217,
    FLDENV = 218,
    FLDL2E = 219,
    FLDL2T = 220,
    FLDLG2 = 221,
    FLDLN2 = 222,
    FLDPI = 223,
    FLDZ = 224,
    FMUL = 225,
    FMULP = 226,
    FNCLEX = 227,
    FNINIT = 228,
    FNOP = 229,
    FNSAVE = 230,
    FNSTCW = 231,
    FNSTENV = 232,
    FNSTSW = 233,
    FPATAN = 234,
    FPREM = 235,
    FPREM1 = 236,
    FPTAN = 237,
    FRNDINT = 238,
    FRSTOR = 239,
    FSCALE = 240,
    FSETPM287_NOP = 241,
    FSIN = 242,
    FSINCOS = 243,
    FSQRT = 244,
    FST = 245,
    FSTP = 246,
    FSTPNCE = 247,
    FSUB = 248,
    FSUBP = 249,
    FSUBR = 250,
    FSUBRP = 251,
    FTST = 252,
    FUCOM = 253,
    FUCOMI = 254,
    FUCOMIP = 255,
    FUCOMP = 256,
    FUCOMPP = 257,
    FWAIT = 258,
    FXAM = 259,
    FXCH = 260,
    FXRSTOR = 261,
    FXRSTOR64 = 262,
    FXSAVE = 263,
    FXSAVE64 = 264,
    FXTRACT = 265,
    FYL2X = 266,
    FYL2XP1 = 267,
    GETSEC = 268,
    GF2P8AFFINEINVQB = 269,
    GF2P8AFFINEQB = 270,
    GF2P8MULB = 271,
    HADDPD = 272,
    HADDPS = 273,
    HLT = 274,
    HRESET = 275,
    HSUBPD = 276,
    HSUBPS = 277,
    IDIV = 278,
    IMUL = 279,
    IN = 280,
    INC = 281,
    INCSSPD = 282,
    INCSSPQ = 283,
    INSB = 284,
    INSD = 285,
    INSERTPS = 286,
    INSERTQ = 287,
    INSW = 288,
    INT = 289,
    INT1 = 290,
    INT3 = 291,
    INTO = 292,
    INVD = 293,
    INVEPT = 294,
    INVLPG = 295,
    INVLPGA = 296,
    INVLPGB = 297,
    INVPCID = 298,
    INVVPID = 299,
    IRET = 300,
    IRETD = 301,
    IRETQ = 302,
    JB = 303,
    JBE = 304,
    JCXZ = 305,
    JECXZ = 306,
    JKNZD = 307,
    JKZD = 308,
    JL = 309,
    JLE = 310,
    JMP = 311,
    JNB = 312,
    JNBE = 313,
    JNL = 314,
    JNLE = 315,
    JNO = 316,
    JNP = 317,
    JNS = 318,
    JNZ = 319,
    JO = 320,
    JP = 321,
    JRCXZ = 322,
    JS = 323,
    JZ = 324,
    KADDB = 325,
    KADDD = 326,
    KADDQ = 327,
    KADDW = 328,
    KAND = 329,
    KANDB = 330,
    KANDD = 331,
    KANDN = 332,
    KANDNB = 333,
    KANDND = 334,
    KANDNQ = 335,
    KANDNR = 336,
    KANDNW = 337,
    KANDQ = 338,
    KANDW = 339,
    KCONCATH = 340,
    KCONCATL = 341,
    KEXTRACT = 342,
    KMERGE2L1H = 343,
    KMERGE2L1L = 344,
    KMOV = 345,
    KMOVB = 346,
    KMOVD = 347,
    KMOVQ = 348,
    KMOVW = 349,
    KNOT = 350,
    KNOTB = 351,
    KNOTD = 352,
    KNOTQ = 353,
    KNOTW = 354,
    KOR = 355,
    KORB = 356,
    KORD = 357,
    KORQ = 358,
    KORTEST = 359,
    KORTESTB = 360,
    KORTESTD = 361,
    KORTESTQ = 362,
    KORTESTW = 363,
    KORW = 364,
    KSHIFTLB = 365,
    KSHIFTLD = 366,
    KSHIFTLQ = 367,
    KSHIFTLW = 368,
    KSHIFTRB = 369,
    KSHIFTRD = 370,
    KSHIFTRQ = 371,
    KSHIFTRW = 372,
    KTESTB = 373,
    KTESTD = 374,
    KTESTQ = 375,
    KTESTW = 376,
    KUNPCKBW = 377,
    KUNPCKDQ = 378,
    KUNPCKWD = 379,
    KXNOR = 380,
    KXNORB = 381,
    KXNORD = 382,
    KXNORQ = 383,
    KXNORW = 384,
    KXOR = 385,
    KXORB = 386,
    KXORD = 387,
    KXORQ = 388,
    KXORW = 389,
    LAHF = 390,
    LAR = 391,
    LDDQU = 392,
    LDMXCSR = 393,
    LDS = 394,
    LDTILECFG = 395,
    LEA = 396,
    LEAVE = 397,
    LES = 398,
    LFENCE = 399,
    LFS = 400,
    LGDT = 401,
    LGS = 402,
    LIDT = 403,
    LLDT = 404,
    LLWPCB = 405,
    LMSW = 406,
    LOADIWKEY = 407,
    LODSB = 408,
    LODSD = 409,
    LODSQ = 410,
    LODSW = 411,
    LOOP = 412,
    LOOPE = 413,
    LOOPNE = 414,
    LSL = 415,
    LSS = 416,
    LTR = 417,
    LWPINS = 418,
    LWPVAL = 419,
    LZCNT = 420,
    MASKMOVDQU = 421,
    MASKMOVQ = 422,
    MAXPD = 423,
    MAXPS = 424,
    MAXSD = 425,
    MAXSS = 426,
    MCOMMIT = 427,
    MFENCE = 428,
    MINPD = 429,
    MINPS = 430,
    MINSD = 431,
    MINSS = 432,
    MONITOR = 433,
    MONITORX = 434,
    MONTMUL = 435,
    MOV = 436,
    MOVAPD = 437,
    MOVAPS = 438,
    MOVBE = 439,
    MOVD = 440,
    MOVDDUP = 441,
    MOVDIR64B = 442,
    MOVDIRI = 443,
    MOVDQ2Q = 444,
    MOVDQA = 445,
    MOVDQU = 446,
    MOVHLPS = 447,
    MOVHPD = 448,
    MOVHPS = 449,
    MOVLHPS = 450,
    MOVLPD = 451,
    MOVLPS = 452,
    MOVMSKPD = 453,
    MOVMSKPS = 454,
    MOVNTDQ = 455,
    MOVNTDQA = 456,
    MOVNTI = 457,
    MOVNTPD = 458,
    MOVNTPS = 459,
    MOVNTQ = 460,
    MOVNTSD = 461,
    MOVNTSS = 462,
    MOVQ = 463,
    MOVQ2DQ = 464,
    MOVSB = 465,
    MOVSD = 466,
    MOVSHDUP = 467,
    MOVSLDUP = 468,
    MOVSQ = 469,
    MOVSS = 470,
    MOVSW = 471,
    MOVSX = 472,
    MOVSXD = 473,
    MOVUPD = 474,
    MOVUPS = 475,
    MOVZX = 476,
    MPSADBW = 477,
    MUL = 478,
    MULPD = 479,
    MULPS = 480,
    MULSD = 481,
    MULSS = 482,
    MULX = 483,
    MWAIT = 484,
    MWAITX = 485,
    NEG = 486,
    NOP = 487,
    NOT = 488,
    OR = 489,
    ORPD = 490,
    ORPS = 491,
    OUT = 492,
    OUTSB = 493,
    OUTSD = 494,
    OUTSW = 495,
    PABSB = 496,
    PABSD = 497,
    PABSW = 498,
    PACKSSDW = 499,
    PACKSSWB = 500,
    PACKUSDW = 501,
    PACKUSWB = 502,
    PADDB = 503,
    PADDD = 504,
    PADDQ = 505,
    PADDSB = 506,
    PADDSW = 507,
    PADDUSB = 508,
    PADDUSW = 509,
    PADDW = 510,
    PALIGNR = 511,
    PAND = 512,
    PANDN = 513,
    PAUSE = 514,
    PAVGB = 515,
    PAVGUSB = 516,
    PAVGW = 517,
    PBLENDVB = 518,
    PBLENDW = 519,
    PBNDKB = 520,
    PCLMULQDQ = 521,
    PCMPEQB = 522,
    PCMPEQD = 523,
    PCMPEQQ = 524,
    PCMPEQW = 525,
    PCMPESTRI = 526,
    PCMPESTRM = 527,
    PCMPGTB = 528,
    PCMPGTD = 529,
    PCMPGTQ = 530,
    PCMPGTW = 531,
    PCMPISTRI = 532,
    PCMPISTRM = 533,
    PCOMMIT = 534,
    PCONFIG = 535,
    PDEP = 536,
    PEXT = 537,
    PEXTRB = 538,
    PEXTRD = 539,
    PEXTRQ = 540,
    PEXTRW = 541,
    PF2ID = 542,
    PF2IW = 543,
    PFACC = 544,
    PFADD = 545,
    PFCMPEQ = 546,
    PFCMPGE = 547,
    PFCMPGT = 548,
    PFCPIT1 = 549,
    PFMAX = 550,
    PFMIN = 551,
    PFMUL = 552,
    PFNACC = 553,
    PFPNACC = 554,
    PFRCP = 555,
    PFRCPIT2 = 556,
    PFRSQIT1 = 557,
    PFSQRT = 558,
    PFSUB = 559,
    PFSUBR = 560,
    PHADDD = 561,
    PHADDSW = 562,
    PHADDW = 563,
    PHMINPOSUW = 564,
    PHSUBD = 565,
    PHSUBSW = 566,
    PHSUBW = 567,
    PI2FD = 568,
    PI2FW = 569,
    PINSRB = 570,
    PINSRD = 571,
    PINSRQ = 572,
    PINSRW = 573,
    PMADDUBSW = 574,
    PMADDWD = 575,
    PMAXSB = 576,
    PMAXSD = 577,
    PMAXSW = 578,
    PMAXUB = 579,
    PMAXUD = 580,
    PMAXUW = 581,
    PMINSB = 582,
    PMINSD = 583,
    PMINSW = 584,
    PMINUB = 585,
    PMINUD = 586,
    PMINUW = 587,
    PMOVMSKB = 588,
    PMOVSXBD = 589,
    PMOVSXBQ = 590,
    PMOVSXBW = 591,
    PMOVSXDQ = 592,
    PMOVSXWD = 593,
    PMOVSXWQ = 594,
    PMOVZXBD = 595,
    PMOVZXBQ = 596,
    PMOVZXBW = 597,
    PMOVZXDQ = 598,
    PMOVZXWD = 599,
    PMOVZXWQ = 600,
    PMULDQ = 601,
    PMULHRSW = 602,
    PMULHRW = 603,
    PMULHUW = 604,
    PMULHW = 605,
    PMULLD = 606,
    PMULLW = 607,
    PMULUDQ = 608,
    POP = 609,
    POPA = 610,
    POPAD = 611,
    POPCNT = 612,
    POPF = 613,
    POPFD = 614,
    POPFQ = 615,
    POR = 616,
    PREFETCH = 617,
    PREFETCHIT0 = 618,
    PREFETCHIT1 = 619,
    PREFETCHNTA = 620,
    PREFETCHT0 = 621,
    PREFETCHT1 = 622,
    PREFETCHT2 = 623,
    PREFETCHW = 624,
    PREFETCHWT1 = 625,
    PSADBW = 626,
    PSHUFB = 627,
    PSHUFD = 628,
    PSHUFHW = 629,
    PSHUFLW = 630,
    PSHUFW = 631,
    PSIGNB = 632,
    PSIGND = 633,
    PSIGNW = 634,
    PSLLD = 635,
    PSLLDQ = 636,
    PSLLQ = 637,
    PSLLW = 638,
    PSMASH = 639,
    PSRAD = 640,
    PSRAW = 641,
    PSRLD = 642,
    PSRLDQ = 643,
    PSRLQ = 644,
    PSRLW = 645,
    PSUBB = 646,
    PSUBD = 647,
    PSUBQ = 648,
    PSUBSB = 649,
    PSUBSW = 650,
    PSUBUSB = 651,
    PSUBUSW = 652,
    PSUBW = 653,
    PSWAPD = 654,
    PTEST = 655,
    PTWRITE = 656,
    PUNPCKHBW = 657,
    PUNPCKHDQ = 658,
    PUNPCKHQDQ = 659,
    PUNPCKHWD = 660,
    PUNPCKLBW = 661,
    PUNPCKLDQ = 662,
    PUNPCKLQDQ = 663,
    PUNPCKLWD = 664,
    PUSH = 665,
    PUSHA = 666,
    PUSHAD = 667,
    PUSHF = 668,
    PUSHFD = 669,
    PUSHFQ = 670,
    PVALIDATE = 671,
    PXOR = 672,
    RCL = 673,
    RCPPS = 674,
    RCPSS = 675,
    RCR = 676,
    RDFSBASE = 677,
    RDGSBASE = 678,
    RDMSR = 679,
    RDMSRLIST = 680,
    RDPID = 681,
    RDPKRU = 682,
    RDPMC = 683,
    RDPRU = 684,
    RDRAND = 685,
    RDSEED = 686,
    RDSSPD = 687,
    RDSSPQ = 688,
    RDTSC = 689,
    RDTSCP = 690,
    RET = 691,
    RMPADJUST = 692,
    RMPUPDATE = 693,
    ROL = 694,
    ROR = 695,
    RORX = 696,
    ROUNDPD = 697,
    ROUNDPS = 698,
    ROUNDSD = 699,
    ROUNDSS = 700,
    RSM = 701,
    RSQRTPS = 702,
    RSQRTSS = 703,
    RSTORSSP = 704,
    SAHF = 705,
    SALC = 706,
    SAR = 707,
    SARX = 708,
    SAVEPREVSSP = 709,
    SBB = 710,
    SCASB = 711,
    SCASD = 712,
    SCASQ = 713,
    SCASW = 714,
    SEAMCALL = 715,
    SEAMOPS = 716,
    SEAMRET = 717,
    SENDUIPI = 718,
    SERIALIZE = 719,
    SETB = 720,
    SETBE = 721,
    SETL = 722,
    SETLE = 723,
    SETNB = 724,
    SETNBE = 725,
    SETNL = 726,
    SETNLE = 727,
    SETNO = 728,
    SETNP = 729,
    SETNS = 730,
    SETNZ = 731,
    SETO = 732,
    SETP = 733,
    SETS = 734,
    SETSSBSY = 735,
    SETZ = 736,
    SFENCE = 737,
    SGDT = 738,
    SHA1MSG1 = 739,
    SHA1MSG2 = 740,
    SHA1NEXTE = 741,
    SHA1RNDS4 = 742,
    SHA256MSG1 = 743,
    SHA256MSG2 = 744,
    SHA256RNDS2 = 745,
    SHL = 746,
    SHLD = 747,
    SHLX = 748,
    SHR = 749,
    SHRD = 750,
    SHRX = 751,
    SHUFPD = 752,
    SHUFPS = 753,
    SIDT = 754,
    SKINIT = 755,
    SLDT = 756,
    SLWPCB = 757,
    SMSW = 758,
    SPFLT = 759,
    SQRTPD = 760,
    SQRTPS = 761,
    SQRTSD = 762,
    SQRTSS = 763,
    STAC = 764,
    STC = 765,
    STD = 766,
    STGI = 767,
    STI = 768,
    STMXCSR = 769,
    STOSB = 770,
    STOSD = 771,
    STOSQ = 772,
    STOSW = 773,
    STR = 774,
    STTILECFG = 775,
    STUI = 776,
    SUB = 777,
    SUBPD = 778,
    SUBPS = 779,
    SUBSD = 780,
    SUBSS = 781,
    SWAPGS = 782,
    SYSCALL = 783,
    SYSENTER = 784,
    SYSEXIT = 785,
    SYSRET = 786,
    T1MSKC = 787,
    TDCALL = 788,
    TDPBF16PS = 789,
    TDPBSSD = 790,
    TDPBSUD = 791,
    TDPBUSD = 792,
    TDPBUUD = 793,
    TDPFP16PS = 794,
    TEST = 795,
    TESTUI = 796,
    TILELOADD = 797,
    TILELOADDT1 = 798,
    TILERELEASE = 799,
    TILESTORED = 800,
    TILEZERO = 801,
    TLBSYNC = 802,
    TPAUSE = 803,
    TZCNT = 804,
    TZCNTI = 805,
    TZMSK = 806,
    UCOMISD = 807,
    UCOMISS = 808,
    UD0 = 809,
    UD1 = 810,
    UD2 = 811,
    UIRET = 812,
    UMONITOR = 813,
    UMWAIT = 814,
    UNPCKHPD = 815,
    UNPCKHPS = 816,
    UNPCKLPD = 817,
    UNPCKLPS = 818,
    V4FMADDPS = 819,
    V4FMADDSS = 820,
    V4FNMADDPS = 821,
    V4FNMADDSS = 822,
    VADDNPD = 823,
    VADDNPS = 824,
    VADDPD = 825,
    VADDPH = 826,
    VADDPS = 827,
    VADDSD = 828,
    VADDSETSPS = 829,
    VADDSH = 830,
    VADDSS = 831,
    VADDSUBPD = 832,
    VADDSUBPS = 833,
    VAESDEC = 834,
    VAESDECLAST = 835,
    VAESENC = 836,
    VAESENCLAST = 837,
    VAESIMC = 838,
    VAESKEYGENASSIST = 839,
    VALIGND = 840,
    VALIGNQ = 841,
    VANDNPD = 842,
    VANDNPS = 843,
    VANDPD = 844,
    VANDPS = 845,
    VBCSTNEBF162PS = 846,
    VBCSTNESH2PS = 847,
    VBLENDMPD = 848,
    VBLENDMPS = 849,
    VBLENDPD = 850,
    VBLENDPS = 851,
    VBLENDVPD = 852,
    VBLENDVPS = 853,
    VBROADCASTF128 = 854,
    VBROADCASTF32X2 = 855,
    VBROADCASTF32X4 = 856,
    VBROADCASTF32X8 = 857,
    VBROADCASTF64X2 = 858,
    VBROADCASTF64X4 = 859,
    VBROADCASTI128 = 860,
    VBROADCASTI32X2 = 861,
    VBROADCASTI32X4 = 862,
    VBROADCASTI32X8 = 863,
    VBROADCASTI64X2 = 864,
    VBROADCASTI64X4 = 865,
    VBROADCASTSD = 866,
    VBROADCASTSS = 867,
    VCMPPD = 868,
    VCMPPH = 869,
    VCMPPS = 870,
    VCMPSD = 871,
    VCMPSH = 872,
    VCMPSS = 873,
    VCOMISD = 874,
    VCOMISH = 875,
    VCOMISS = 876,
    VCOMPRESSPD = 877,
    VCOMPRESSPS = 878,
    VCVTDQ2PD = 879,
    VCVTDQ2PH = 880,
    VCVTDQ2PS = 881,
    VCVTFXPNTDQ2PS = 882,
    VCVTFXPNTPD2DQ = 883,
    VCVTFXPNTPD2UDQ = 884,
    VCVTFXPNTPS2DQ = 885,
    VCVTFXPNTPS2UDQ = 886,
    VCVTFXPNTUDQ2PS = 887,
    VCVTNE2PS2BF16 = 888,
    VCVTNEEBF162PS = 889,
    VCVTNEEPH2PS = 890,
    VCVTNEOBF162PS = 891,
    VCVTNEOPH2PS = 892,
    VCVTNEPS2BF16 = 893,
    VCVTPD2DQ = 894,
    VCVTPD2PH = 895,
    VCVTPD2PS = 896,
    VCVTPD2QQ = 897,
    VCVTPD2UDQ = 898,
    VCVTPD2UQQ = 899,
    VCVTPH2DQ = 900,
    VCVTPH2PD = 901,
    VCVTPH2PS = 902,
    VCVTPH2PSX = 903,
    VCVTPH2QQ = 904,
    VCVTPH2UDQ = 905,
    VCVTPH2UQQ = 906,
    VCVTPH2UW = 907,
    VCVTPH2W = 908,
    VCVTPS2DQ = 909,
    VCVTPS2PD = 910,
    VCVTPS2PH = 911,
    VCVTPS2PHX = 912,
    VCVTPS2QQ = 913,
    VCVTPS2UDQ = 914,
    VCVTPS2UQQ = 915,
    VCVTQQ2PD = 916,
    VCVTQQ2PH = 917,
    VCVTQQ2PS = 918,
    VCVTSD2SH = 919,
    VCVTSD2SI = 920,
    VCVTSD2SS = 921,
    VCVTSD2USI = 922,
    VCVTSH2SD = 923,
    VCVTSH2SI = 924,
    VCVTSH2SS = 925,
    VCVTSH2USI = 926,
    VCVTSI2SD = 927,
    VCVTSI2SH = 928,
    VCVTSI2SS = 929,
    VCVTSS2SD = 930,
    VCVTSS2SH = 931,
    VCVTSS2SI = 932,
    VCVTSS2USI = 933,
    VCVTTPD2DQ = 934,
    VCVTTPD2QQ = 935,
    VCVTTPD2UDQ = 936,
    VCVTTPD2UQQ = 937,
    VCVTTPH2DQ = 938,
    VCVTTPH2QQ = 939,
    VCVTTPH2UDQ = 940,
    VCVTTPH2UQQ = 941,
    VCVTTPH2UW = 942,
    VCVTTPH2W = 943,
    VCVTTPS2DQ = 944,
    VCVTTPS2QQ = 945,
    VCVTTPS2UDQ = 946,
    VCVTTPS2UQQ = 947,
    VCVTTSD2SI = 948,
    VCVTTSD2USI = 949,
    VCVTTSH2SI = 950,
    VCVTTSH2USI = 951,
    VCVTTSS2SI = 952,
    VCVTTSS2USI = 953,
    VCVTUDQ2PD = 954,
    VCVTUDQ2PH = 955,
    VCVTUDQ2PS = 956,
    VCVTUQQ2PD = 957,
    VCVTUQQ2PH = 958,
    VCVTUQQ2PS = 959,
    VCVTUSI2SD = 960,
    VCVTUSI2SH = 961,
    VCVTUSI2SS = 962,
    VCVTUW2PH = 963,
    VCVTW2PH = 964,
    VDBPSADBW = 965,
    VDIVPD = 966,
    VDIVPH = 967,
    VDIVPS = 968,
    VDIVSD = 969,
    VDIVSH = 970,
    VDIVSS = 971,
    VDPBF16PS = 972,
    VDPPD = 973,
    VDPPS = 974,
    VERR = 975,
    VERW = 976,
    VEXP223PS = 977,
    VEXP2PD = 978,
    VEXP2PS = 979,
    VEXPANDPD = 980,
    VEXPANDPS = 981,
    VEXTRACTF128 = 982,
    VEXTRACTF32X4 = 983,
    VEXTRACTF32X8 = 984,
    VEXTRACTF64X2 = 985,
    VEXTRACTF64X4 = 986,
    VEXTRACTI128 = 987,
    VEXTRACTI32X4 = 988,
    VEXTRACTI32X8 = 989,
    VEXTRACTI64X2 = 990,
    VEXTRACTI64X4 = 991,
    VEXTRACTPS = 992,
    VFCMADDCPH = 993,
    VFCMADDCSH = 994,
    VFCMULCPH = 995,
    VFCMULCSH = 996,
    VFIXUPIMMPD = 997,
    VFIXUPIMMPS = 998,
    VFIXUPIMMSD = 999,
    VFIXUPIMMSS = 1000,
    VFIXUPNANPD = 1001,
    VFIXUPNANPS = 1002,
    VFMADD132PD = 1003,
    VFMADD132PH = 1004,
    VFMADD132PS = 1005,
    VFMADD132SD = 1006,
    VFMADD132SH = 1007,
    VFMADD132SS = 1008,
    VFMADD213PD = 1009,
    VFMADD213PH = 1010,
    VFMADD213PS = 1011,
    VFMADD213SD = 1012,
    VFMADD213SH = 1013,
    VFMADD213SS = 1014,
    VFMADD231PD = 1015,
    VFMADD231PH = 1016,
    VFMADD231PS = 1017,
    VFMADD231SD = 1018,
    VFMADD231SH = 1019,
    VFMADD231SS = 1020,
    VFMADD233PS = 1021,
    VFMADDCPH = 1022,
    VFMADDCSH = 1023,
    VFMADDPD = 1024,
    VFMADDPS = 1025,
    VFMADDSD = 1026,
    VFMADDSS = 1027,
    VFMADDSUB132PD = 1028,
    VFMADDSUB132PH = 1029,
    VFMADDSUB132PS = 1030,
    VFMADDSUB213PD = 1031,
    VFMADDSUB213PH = 1032,
    VFMADDSUB213PS = 1033,
    VFMADDSUB231PD = 1034,
    VFMADDSUB231PH = 1035,
    VFMADDSUB231PS = 1036,
    VFMADDSUBPD = 1037,
    VFMADDSUBPS = 1038,
    VFMSUB132PD = 1039,
    VFMSUB132PH = 1040,
    VFMSUB132PS = 1041,
    VFMSUB132SD = 1042,
    VFMSUB132SH = 1043,
    VFMSUB132SS = 1044,
    VFMSUB213PD = 1045,
    VFMSUB213PH = 1046,
    VFMSUB213PS = 1047,
    VFMSUB213SD = 1048,
    VFMSUB213SH = 1049,
    VFMSUB213SS = 1050,
    VFMSUB231PD = 1051,
    VFMSUB231PH = 1052,
    VFMSUB231PS = 1053,
    VFMSUB231SD = 1054,
    VFMSUB231SH = 1055,
    VFMSUB231SS = 1056,
    VFMSUBADD132PD = 1057,
    VFMSUBADD132PH = 1058,
    VFMSUBADD132PS = 1059,
    VFMSUBADD213PD = 1060,
    VFMSUBADD213PH = 1061,
    VFMSUBADD213PS = 1062,
    VFMSUBADD231PD = 1063,
    VFMSUBADD231PH = 1064,
    VFMSUBADD231PS = 1065,
    VFMSUBADDPD = 1066,
    VFMSUBADDPS = 1067,
    VFMSUBPD = 1068,
    VFMSUBPS = 1069,
    VFMSUBSD = 1070,
    VFMSUBSS = 1071,
    VFMULCPH = 1072,
    VFMULCSH = 1073,
    VFNMADD132PD = 1074,
    VFNMADD132PH = 1075,
    VFNMADD132PS = 1076,
    VFNMADD132SD = 1077,
    VFNMADD132SH = 1078,
    VFNMADD132SS = 1079,
    VFNMADD213PD = 1080,
    VFNMADD213PH = 1081,
    VFNMADD213PS = 1082,
    VFNMADD213SD = 1083,
    VFNMADD213SH = 1084,
    VFNMADD213SS = 1085,
    VFNMADD231PD = 1086,
    VFNMADD231PH = 1087,
    VFNMADD231PS = 1088,
    VFNMADD231SD = 1089,
    VFNMADD231SH = 1090,
    VFNMADD231SS = 1091,
    VFNMADDPD = 1092,
    VFNMADDPS = 1093,
    VFNMADDSD = 1094,
    VFNMADDSS = 1095,
    VFNMSUB132PD = 1096,
    VFNMSUB132PH = 1097,
    VFNMSUB132PS = 1098,
    VFNMSUB132SD = 1099,
    VFNMSUB132SH = 1100,
    VFNMSUB132SS = 1101,
    VFNMSUB213PD = 1102,
    VFNMSUB213PH = 1103,
    VFNMSUB213PS = 1104,
    VFNMSUB213SD = 1105,
    VFNMSUB213SH = 1106,
    VFNMSUB213SS = 1107,
    VFNMSUB231PD = 1108,
    VFNMSUB231PH = 1109,
    VFNMSUB231PS = 1110,
    VFNMSUB231SD = 1111,
    VFNMSUB231SH = 1112,
    VFNMSUB231SS = 1113,
    VFNMSUBPD = 1114,
    VFNMSUBPS = 1115,
    VFNMSUBSD = 1116,
    VFNMSUBSS = 1117,
    VFPCLASSPD = 1118,
    VFPCLASSPH = 1119,
    VFPCLASSPS = 1120,
    VFPCLASSSD = 1121,
    VFPCLASSSH = 1122,
    VFPCLASSSS = 1123,
    VFRCZPD = 1124,
    VFRCZPS = 1125,
    VFRCZSD = 1126,
    VFRCZSS = 1127,
    VGATHERDPD = 1128,
    VGATHERDPS = 1129,
    VGATHERPF0DPD = 1130,
    VGATHERPF0DPS = 1131,
    VGATHERPF0HINTDPD = 1132,
    VGATHERPF0HINTDPS = 1133,
    VGATHERPF0QPD = 1134,
    VGATHERPF0QPS = 1135,
    VGATHERPF1DPD = 1136,
    VGATHERPF1DPS = 1137,
    VGATHERPF1QPD = 1138,
    VGATHERPF1QPS = 1139,
    VGATHERQPD = 1140,
    VGATHERQPS = 1141,
    VGETEXPPD = 1142,
    VGETEXPPH = 1143,
    VGETEXPPS = 1144,
    VGETEXPSD = 1145,
    VGETEXPSH = 1146,
    VGETEXPSS = 1147,
    VGETMANTPD = 1148,
    VGETMANTPH = 1149,
    VGETMANTPS = 1150,
    VGETMANTSD = 1151,
    VGETMANTSH = 1152,
    VGETMANTSS = 1153,
    VGF2P8AFFINEINVQB = 1154,
    VGF2P8AFFINEQB = 1155,
    VGF2P8MULB = 1156,
    VGMAXABSPS = 1157,
    VGMAXPD = 1158,
    VGMAXPS = 1159,
    VGMINPD = 1160,
    VGMINPS = 1161,
    VHADDPD = 1162,
    VHADDPS = 1163,
    VHSUBPD = 1164,
    VHSUBPS = 1165,
    VINSERTF128 = 1166,
    VINSERTF32X4 = 1167,
    VINSERTF32X8 = 1168,
    VINSERTF64X2 = 1169,
    VINSERTF64X4 = 1170,
    VINSERTI128 = 1171,
    VINSERTI32X4 = 1172,
    VINSERTI32X8 = 1173,
    VINSERTI64X2 = 1174,
    VINSERTI64X4 = 1175,
    VINSERTPS = 1176,
    VLDDQU = 1177,
    VLDMXCSR = 1178,
    VLOADUNPACKHD = 1179,
    VLOADUNPACKHPD = 1180,
    VLOADUNPACKHPS = 1181,
    VLOADUNPACKHQ = 1182,
    VLOADUNPACKLD = 1183,
    VLOADUNPACKLPD = 1184,
    VLOADUNPACKLPS = 1185,
    VLOADUNPACKLQ = 1186,
    VLOG2PS = 1187,
    VMASKMOVDQU = 1188,
    VMASKMOVPD = 1189,
    VMASKMOVPS = 1190,
    VMAXPD = 1191,
    VMAXPH = 1192,
    VMAXPS = 1193,
    VMAXSD = 1194,
    VMAXSH = 1195,
    VMAXSS = 1196,
    VMCALL = 1197,
    VMCLEAR = 1198,
    VMFUNC = 1199,
    VMINPD = 1200,
    VMINPH = 1201,
    VMINPS = 1202,
    VMINSD = 1203,
    VMINSH = 1204,
    VMINSS = 1205,
    VMLAUNCH = 1206,
    VMLOAD = 1207,
    VMMCALL = 1208,
    VMOVAPD = 1209,
    VMOVAPS = 1210,
    VMOVD = 1211,
    VMOVDDUP = 1212,
    VMOVDQA = 1213,
    VMOVDQA32 = 1214,
    VMOVDQA64 = 1215,
    VMOVDQU = 1216,
    VMOVDQU16 = 1217,
    VMOVDQU32 = 1218,
    VMOVDQU64 = 1219,
    VMOVDQU8 = 1220,
    VMOVHLPS = 1221,
    VMOVHPD = 1222,
    VMOVHPS = 1223,
    VMOVLHPS = 1224,
    VMOVLPD = 1225,
    VMOVLPS = 1226,
    VMOVMSKPD = 1227,
    VMOVMSKPS = 1228,
    VMOVNRAPD = 1229,
    VMOVNRAPS = 1230,
    VMOVNRNGOAPD = 1231,
    VMOVNRNGOAPS = 1232,
    VMOVNTDQ = 1233,
    VMOVNTDQA = 1234,
    VMOVNTPD = 1235,
    VMOVNTPS = 1236,
    VMOVQ = 1237,
    VMOVSD = 1238,
    VMOVSH = 1239,
    VMOVSHDUP = 1240,
    VMOVSLDUP = 1241,
    VMOVSS = 1242,
    VMOVUPD = 1243,
    VMOVUPS = 1244,
    VMOVW = 1245,
    VMPSADBW = 1246,
    VMPTRLD = 1247,
    VMPTRST = 1248,
    VMREAD = 1249,
    VMRESUME = 1250,
    VMRUN = 1251,
    VMSAVE = 1252,
    VMULPD = 1253,
    VMULPH = 1254,
    VMULPS = 1255,
    VMULSD = 1256,
    VMULSH = 1257,
    VMULSS = 1258,
    VMWRITE = 1259,
    VMXOFF = 1260,
    VMXON = 1261,
    VORPD = 1262,
    VORPS = 1263,
    VP2INTERSECTD = 1264,
    VP2INTERSECTQ = 1265,
    VP4DPWSSD = 1266,
    VP4DPWSSDS = 1267,
    VPABSB = 1268,
    VPABSD = 1269,
    VPABSQ = 1270,
    VPABSW = 1271,
    VPACKSSDW = 1272,
    VPACKSSWB = 1273,
    VPACKSTOREHD = 1274,
    VPACKSTOREHPD = 1275,
    VPACKSTOREHPS = 1276,
    VPACKSTOREHQ = 1277,
    VPACKSTORELD = 1278,
    VPACKSTORELPD = 1279,
    VPACKSTORELPS = 1280,
    VPACKSTORELQ = 1281,
    VPACKUSDW = 1282,
    VPACKUSWB = 1283,
    VPADCD = 1284,
    VPADDB = 1285,
    VPADDD = 1286,
    VPADDQ = 1287,
    VPADDSB = 1288,
    VPADDSETCD = 1289,
    VPADDSETSD = 1290,
    VPADDSW = 1291,
    VPADDUSB = 1292,
    VPADDUSW = 1293,
    VPADDW = 1294,
    VPALIGNR = 1295,
    VPAND = 1296,
    VPANDD = 1297,
    VPANDN = 1298,
    VPANDND = 1299,
    VPANDNQ = 1300,
    VPANDQ = 1301,
    VPAVGB = 1302,
    VPAVGW = 1303,
    VPBLENDD = 1304,
    VPBLENDMB = 1305,
    VPBLENDMD = 1306,
    VPBLENDMQ = 1307,
    VPBLENDMW = 1308,
    VPBLENDVB = 1309,
    VPBLENDW = 1310,
    VPBROADCASTB = 1311,
    VPBROADCASTD = 1312,
    VPBROADCASTMB2Q = 1313,
    VPBROADCASTMW2D = 1314,
    VPBROADCASTQ = 1315,
    VPBROADCASTW = 1316,
    VPCLMULQDQ = 1317,
    VPCMOV = 1318,
    VPCMPB = 1319,
    VPCMPD = 1320,
    VPCMPEQB = 1321,
    VPCMPEQD = 1322,
    VPCMPEQQ = 1323,
    VPCMPEQW = 1324,
    VPCMPESTRI = 1325,
    VPCMPESTRM = 1326,
    VPCMPGTB = 1327,
    VPCMPGTD = 1328,
    VPCMPGTQ = 1329,
    VPCMPGTW = 1330,
    VPCMPISTRI = 1331,
    VPCMPISTRM = 1332,
    VPCMPLTD = 1333,
    VPCMPQ = 1334,
    VPCMPUB = 1335,
    VPCMPUD = 1336,
    VPCMPUQ = 1337,
    VPCMPUW = 1338,
    VPCMPW = 1339,
    VPCOMB = 1340,
    VPCOMD = 1341,
    VPCOMPRESSB = 1342,
    VPCOMPRESSD = 1343,
    VPCOMPRESSQ = 1344,
    VPCOMPRESSW = 1345,
    VPCOMQ = 1346,
    VPCOMUB = 1347,
    VPCOMUD = 1348,
    VPCOMUQ = 1349,
    VPCOMUW = 1350,
    VPCOMW = 1351,
    VPCONFLICTD = 1352,
    VPCONFLICTQ = 1353,
    VPDPBSSD = 1354,
    VPDPBSSDS = 1355,
    VPDPBSUD = 1356,
    VPDPBSUDS = 1357,
    VPDPBUSD = 1358,
    VPDPBUSDS = 1359,
    VPDPBUUD = 1360,
    VPDPBUUDS = 1361,
    VPDPWSSD = 1362,
    VPDPWSSDS = 1363,
    VPDPWSUD = 1364,
    VPDPWSUDS = 1365,
    VPDPWUSD = 1366,
    VPDPWUSDS = 1367,
    VPDPWUUD = 1368,
    VPDPWUUDS = 1369,
    VPERM2F128 = 1370,
    VPERM2I128 = 1371,
    VPERMB = 1372,
    VPERMD = 1373,
    VPERMF32X4 = 1374,
    VPERMI2B = 1375,
    VPERMI2D = 1376,
    VPERMI2PD = 1377,
    VPERMI2PS = 1378,
    VPERMI2Q = 1379,
    VPERMI2W = 1380,
    VPERMIL2PD = 1381,
    VPERMIL2PS = 1382,
    VPERMILPD = 1383,
    VPERMILPS = 1384,
    VPERMPD = 1385,
    VPERMPS = 1386,
    VPERMQ = 1387,
    VPERMT2B = 1388,
    VPERMT2D = 1389,
    VPERMT2PD = 1390,
    VPERMT2PS = 1391,
    VPERMT2Q = 1392,
    VPERMT2W = 1393,
    VPERMW = 1394,
    VPEXPANDB = 1395,
    VPEXPANDD = 1396,
    VPEXPANDQ = 1397,
    VPEXPANDW = 1398,
    VPEXTRB = 1399,
    VPEXTRD = 1400,
    VPEXTRQ = 1401,
    VPEXTRW = 1402,
    VPGATHERDD = 1403,
    VPGATHERDQ = 1404,
    VPGATHERQD = 1405,
    VPGATHERQQ = 1406,
    VPHADDBD = 1407,
    VPHADDBQ = 1408,
    VPHADDBW = 1409,
    VPHADDD = 1410,
    VPHADDDQ = 1411,
    VPHADDSW = 1412,
    VPHADDUBD = 1413,
    VPHADDUBQ = 1414,
    VPHADDUBW = 1415,
    VPHADDUDQ = 1416,
    VPHADDUWD = 1417,
    VPHADDUWQ = 1418,
    VPHADDW = 1419,
    VPHADDWD = 1420,
    VPHADDWQ = 1421,
    VPHMINPOSUW = 1422,
    VPHSUBBW = 1423,
    VPHSUBD = 1424,
    VPHSUBDQ = 1425,
    VPHSUBSW = 1426,
    VPHSUBW = 1427,
    VPHSUBWD = 1428,
    VPINSRB = 1429,
    VPINSRD = 1430,
    VPINSRQ = 1431,
    VPINSRW = 1432,
    VPLZCNTD = 1433,
    VPLZCNTQ = 1434,
    VPMACSDD = 1435,
    VPMACSDQH = 1436,
    VPMACSDQL = 1437,
    VPMACSSDD = 1438,
    VPMACSSDQH = 1439,
    VPMACSSDQL = 1440,
    VPMACSSWD = 1441,
    VPMACSSWW = 1442,
    VPMACSWD = 1443,
    VPMACSWW = 1444,
    VPMADCSSWD = 1445,
    VPMADCSWD = 1446,
    VPMADD231D = 1447,
    VPMADD233D = 1448,
    VPMADD52HUQ = 1449,
    VPMADD52LUQ = 1450,
    VPMADDUBSW = 1451,
    VPMADDWD = 1452,
    VPMASKMOVD = 1453,
    VPMASKMOVQ = 1454,
    VPMAXSB = 1455,
    VPMAXSD = 1456,
    VPMAXSQ = 1457,
    VPMAXSW = 1458,
    VPMAXUB = 1459,
    VPMAXUD = 1460,
    VPMAXUQ = 1461,
    VPMAXUW = 1462,
    VPMINSB = 1463,
    VPMINSD = 1464,
    VPMINSQ = 1465,
    VPMINSW = 1466,
    VPMINUB = 1467,
    VPMINUD = 1468,
    VPMINUQ = 1469,
    VPMINUW = 1470,
    VPMOVB2M = 1471,
    VPMOVD2M = 1472,
    VPMOVDB = 1473,
    VPMOVDW = 1474,
    VPMOVM2B = 1475,
    VPMOVM2D = 1476,
    VPMOVM2Q = 1477,
    VPMOVM2W = 1478,
    VPMOVMSKB = 1479,
    VPMOVQ2M = 1480,
    VPMOVQB = 1481,
    VPMOVQD = 1482,
    VPMOVQW = 1483,
    VPMOVSDB = 1484,
    VPMOVSDW = 1485,
    VPMOVSQB = 1486,
    VPMOVSQD = 1487,
    VPMOVSQW = 1488,
    VPMOVSWB = 1489,
    VPMOVSXBD = 1490,
    VPMOVSXBQ = 1491,
    VPMOVSXBW = 1492,
    VPMOVSXDQ = 1493,
    VPMOVSXWD = 1494,
    VPMOVSXWQ = 1495,
    VPMOVUSDB = 1496,
    VPMOVUSDW = 1497,
    VPMOVUSQB = 1498,
    VPMOVUSQD = 1499,
    VPMOVUSQW = 1500,
    VPMOVUSWB = 1501,
    VPMOVW2M = 1502,
    VPMOVWB = 1503,
    VPMOVZXBD = 1504,
    VPMOVZXBQ = 1505,
    VPMOVZXBW = 1506,
    VPMOVZXDQ = 1507,
    VPMOVZXWD = 1508,
    VPMOVZXWQ = 1509,
    VPMULDQ = 1510,
    VPMULHD = 1511,
    VPMULHRSW = 1512,
    VPMULHUD = 1513,
    VPMULHUW = 1514,
    VPMULHW = 1515,
    VPMULLD = 1516,
    VPMULLQ = 1517,
    VPMULLW = 1518,
    VPMULTISHIFTQB = 1519,
    VPMULUDQ = 1520,
    VPOPCNTB = 1521,
    VPOPCNTD = 1522,
    VPOPCNTQ = 1523,
    VPOPCNTW = 1524,
    VPOR = 1525,
    VPORD = 1526,
    VPORQ = 1527,
    VPPERM = 1528,
    VPREFETCH0 = 1529,
    VPREFETCH1 = 1530,
    VPREFETCH2 = 1531,
    VPREFETCHE0 = 1532,
    VPREFETCHE1 = 1533,
    VPREFETCHE2 = 1534,
    VPREFETCHENTA = 1535,
    VPREFETCHNTA = 1536,
    VPROLD = 1537,
    VPROLQ = 1538,
    VPROLVD = 1539,
    VPROLVQ = 1540,
    VPRORD = 1541,
    VPRORQ = 1542,
    VPRORVD = 1543,
    VPRORVQ = 1544,
    VPROTB = 1545,
    VPROTD = 1546,
    VPROTQ = 1547,
    VPROTW = 1548,
    VPSADBW = 1549,
    VPSBBD = 1550,
    VPSBBRD = 1551,
    VPSCATTERDD = 1552,
    VPSCATTERDQ = 1553,
    VPSCATTERQD = 1554,
    VPSCATTERQQ = 1555,
    VPSHAB = 1556,
    VPSHAD = 1557,
    VPSHAQ = 1558,
    VPSHAW = 1559,
    VPSHLB = 1560,
    VPSHLD = 1561,
    VPSHLDD = 1562,
    VPSHLDQ = 1563,
    VPSHLDVD = 1564,
    VPSHLDVQ = 1565,
    VPSHLDVW = 1566,
    VPSHLDW = 1567,
    VPSHLQ = 1568,
    VPSHLW = 1569,
    VPSHRDD = 1570,
    VPSHRDQ = 1571,
    VPSHRDVD = 1572,
    VPSHRDVQ = 1573,
    VPSHRDVW = 1574,
    VPSHRDW = 1575,
    VPSHUFB = 1576,
    VPSHUFBITQMB = 1577,
    VPSHUFD = 1578,
    VPSHUFHW = 1579,
    VPSHUFLW = 1580,
    VPSIGNB = 1581,
    VPSIGND = 1582,
    VPSIGNW = 1583,
    VPSLLD = 1584,
    VPSLLDQ = 1585,
    VPSLLQ = 1586,
    VPSLLVD = 1587,
    VPSLLVQ = 1588,
    VPSLLVW = 1589,
    VPSLLW = 1590,
    VPSRAD = 1591,
    VPSRAQ = 1592,
    VPSRAVD = 1593,
    VPSRAVQ = 1594,
    VPSRAVW = 1595,
    VPSRAW = 1596,
    VPSRLD = 1597,
    VPSRLDQ = 1598,
    VPSRLQ = 1599,
    VPSRLVD = 1600,
    VPSRLVQ = 1601,
    VPSRLVW = 1602,
    VPSRLW = 1603,
    VPSUBB = 1604,
    VPSUBD = 1605,
    VPSUBQ = 1606,
    VPSUBRD = 1607,
    VPSUBRSETBD = 1608,
    VPSUBSB = 1609,
    VPSUBSETBD = 1610,
    VPSUBSW = 1611,
    VPSUBUSB = 1612,
    VPSUBUSW = 1613,
    VPSUBW = 1614,
    VPTERNLOGD = 1615,
    VPTERNLOGQ = 1616,
    VPTEST = 1617,
    VPTESTMB = 1618,
    VPTESTMD = 1619,
    VPTESTMQ = 1620,
    VPTESTMW = 1621,
    VPTESTNMB = 1622,
    VPTESTNMD = 1623,
    VPTESTNMQ = 1624,
    VPTESTNMW = 1625,
    VPUNPCKHBW = 1626,
    VPUNPCKHDQ = 1627,
    VPUNPCKHQDQ = 1628,
    VPUNPCKHWD = 1629,
    VPUNPCKLBW = 1630,
    VPUNPCKLDQ = 1631,
    VPUNPCKLQDQ = 1632,
    VPUNPCKLWD = 1633,
    VPXOR = 1634,
    VPXORD = 1635,
    VPXORQ = 1636,
    VRANGEPD = 1637,
    VRANGEPS = 1638,
    VRANGESD = 1639,
    VRANGESS = 1640,
    VRCP14PD = 1641,
    VRCP14PS = 1642,
    VRCP14SD = 1643,
    VRCP14SS = 1644,
    VRCP23PS = 1645,
    VRCP28PD = 1646,
    VRCP28PS = 1647,
    VRCP28SD = 1648,
    VRCP28SS = 1649,
    VRCPPH = 1650,
    VRCPPS = 1651,
    VRCPSH = 1652,
    VRCPSS = 1653,
    VREDUCEPD = 1654,
    VREDUCEPH = 1655,
    VREDUCEPS = 1656,
    VREDUCESD = 1657,
    VREDUCESH = 1658,
    VREDUCESS = 1659,
    VRNDFXPNTPD = 1660,
    VRNDFXPNTPS = 1661,
    VRNDSCALEPD = 1662,
    VRNDSCALEPH = 1663,
    VRNDSCALEPS = 1664,
    VRNDSCALESD = 1665,
    VRNDSCALESH = 1666,
    VRNDSCALESS = 1667,
    VROUNDPD = 1668,
    VROUNDPS = 1669,
    VROUNDSD = 1670,
    VROUNDSS = 1671,
    VRSQRT14PD = 1672,
    VRSQRT14PS = 1673,
    VRSQRT14SD = 1674,
    VRSQRT14SS = 1675,
    VRSQRT23PS = 1676,
    VRSQRT28PD = 1677,
    VRSQRT28PS = 1678,
    VRSQRT28SD = 1679,
    VRSQRT28SS = 1680,
    VRSQRTPH = 1681,
    VRSQRTPS = 1682,
    VRSQRTSH = 1683,
    VRSQRTSS = 1684,
    VSCALEFPD = 1685,
    VSCALEFPH = 1686,
    VSCALEFPS = 1687,
    VSCALEFSD = 1688,
    VSCALEFSH = 1689,
    VSCALEFSS = 1690,
    VSCALEPS = 1691,
    VSCATTERDPD = 1692,
    VSCATTERDPS = 1693,
    VSCATTERPF0DPD = 1694,
    VSCATTERPF0DPS = 1695,
    VSCATTERPF0HINTDPD = 1696,
    VSCATTERPF0HINTDPS = 1697,
    VSCATTERPF0QPD = 1698,
    VSCATTERPF0QPS = 1699,
    VSCATTERPF1DPD = 1700,
    VSCATTERPF1DPS = 1701,
    VSCATTERPF1QPD = 1702,
    VSCATTERPF1QPS = 1703,
    VSCATTERQPD = 1704,
    VSCATTERQPS = 1705,
    VSHA512MSG1 = 1706,
    VSHA512MSG2 = 1707,
    VSHA512RNDS2 = 1708,
    VSHUFF32X4 = 1709,
    VSHUFF64X2 = 1710,
    VSHUFI32X4 = 1711,
    VSHUFI64X2 = 1712,
    VSHUFPD = 1713,
    VSHUFPS = 1714,
    VSM3MSG1 = 1715,
    VSM3MSG2 = 1716,
    VSM3RNDS2 = 1717,
    VSM4KEY4 = 1718,
    VSM4RNDS4 = 1719,
    VSQRTPD = 1720,
    VSQRTPH = 1721,
    VSQRTPS = 1722,
    VSQRTSD = 1723,
    VSQRTSH = 1724,
    VSQRTSS = 1725,
    VSTMXCSR = 1726,
    VSUBPD = 1727,
    VSUBPH = 1728,
    VSUBPS = 1729,
    VSUBRPD = 1730,
    VSUBRPS = 1731,
    VSUBSD = 1732,
    VSUBSH = 1733,
    VSUBSS = 1734,
    VTESTPD = 1735,
    VTESTPS = 1736,
    VUCOMISD = 1737,
    VUCOMISH = 1738,
    VUCOMISS = 1739,
    VUNPCKHPD = 1740,
    VUNPCKHPS = 1741,
    VUNPCKLPD = 1742,
    VUNPCKLPS = 1743,
    VXORPD = 1744,
    VXORPS = 1745,
    VZEROALL = 1746,
    VZEROUPPER = 1747,
    WBINVD = 1748,
    WRFSBASE = 1749,
    WRGSBASE = 1750,
    WRMSR = 1751,
    WRMSRLIST = 1752,
    WRMSRNS = 1753,
    WRPKRU = 1754,
    WRSSD = 1755,
    WRSSQ = 1756,
    WRUSSD = 1757,
    WRUSSQ = 1758,
    XABORT = 1759,
    XADD = 1760,
    XBEGIN = 1761,
    XCHG = 1762,
    XCRYPT_CBC = 1763,
    XCRYPT_CFB = 1764,
    XCRYPT_CTR = 1765,
    XCRYPT_ECB = 1766,
    XCRYPT_OFB = 1767,
    XEND = 1768,
    XGETBV = 1769,
    XLAT = 1770,
    XOR = 1771,
    XORPD = 1772,
    XORPS = 1773,
    XRESLDTRK = 1774,
    XRSTOR = 1775,
    XRSTOR64 = 1776,
    XRSTORS = 1777,
    XRSTORS64 = 1778,
    XSAVE = 1779,
    XSAVE64 = 1780,
    XSAVEC = 1781,
    XSAVEC64 = 1782,
    XSAVEOPT = 1783,
    XSAVEOPT64 = 1784,
    XSAVES = 1785,
    XSAVES64 = 1786,
    XSETBV = 1787,
    XSHA1 = 1788,
    XSHA256 = 1789,
    XSTORE = 1790,
    XSUSLDTRK = 1791,
    XTEST = 1792,
}

pub const MNEMONIC_MAX_VALUE: usize = 1792;

/// Defines the `ZydisMachineMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum MachineMode {
    /// 64 bit mode.
    LONG_64 = 0,
    /// 32 bit protected mode.
    LONG_COMPAT_32 = 1,
    /// 16 bit protected mode.
    LONG_COMPAT_16 = 2,
    /// 32 bit protected mode.
    LEGACY_32 = 3,
    /// 16 bit protected mode.
    LEGACY_16 = 4,
    /// 16 bit real mode.
    REAL_16 = 5,
}

pub const MACHINE_MODE_MAX_VALUE: usize = 5;

/// Defines the `ZydisStackWidth` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum StackWidth {
    _16 = 0,
    _32 = 1,
    _64 = 2,
}

pub const STACK_WIDTH_MAX_VALUE: usize = 2;

/// Defines the `ZydisElementType` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum ElementType {
    INVALID = 0,
    /// A struct type.
    STRUCT = 1,
    /// Unsigned integer value.
    UINT = 2,
    /// Signed integer value.
    INT = 3,
    /// 16-bit floating point value (`half`).
    FLOAT16 = 4,
    /// 32-bit floating point value (`single`).
    FLOAT32 = 5,
    /// 64-bit floating point value (`double`).
    FLOAT64 = 6,
    /// 80-bit floating point value (`extended`).
    FLOAT80 = 7,
    /// 16-bit brain floating point value.
    BFLOAT16 = 8,
    /// Binary coded decimal value.
    LONGBCD = 9,
    /// A condition code (e.g. used by `CMPPD`, `VCMPPD`, ...).
    CC = 10,
}

pub const ELEMENT_TYPE_MAX_VALUE: usize = 10;

/// Defines the `ZydisOperandType` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum OperandType {
    /// The operand is not used.
    UNUSED = 0,
    /// The operand is a register operand.
    REGISTER = 1,
    /// The operand is a memory operand.
    MEMORY = 2,
    /// The operand is a pointer operand with a segment:offset lvalue.
    POINTER = 3,
    /// The operand is an immediate operand.
    IMMEDIATE = 4,
}

pub const OPERAND_TYPE_MAX_VALUE: usize = 4;

/// Defines the `ZydisOperandEncoding` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum OperandEncoding {
    NONE = 0,
    MODRM_REG = 1,
    MODRM_RM = 2,
    OPCODE = 3,
    NDSNDD = 4,
    IS4 = 5,
    MASK = 6,
    DISP8 = 7,
    DISP16 = 8,
    DISP32 = 9,
    DISP64 = 10,
    DISP16_32_64 = 11,
    DISP32_32_64 = 12,
    DISP16_32_32 = 13,
    UIMM8 = 14,
    UIMM16 = 15,
    UIMM32 = 16,
    UIMM64 = 17,
    UIMM16_32_64 = 18,
    UIMM32_32_64 = 19,
    UIMM16_32_32 = 20,
    SIMM8 = 21,
    SIMM16 = 22,
    SIMM32 = 23,
    SIMM64 = 24,
    SIMM16_32_64 = 25,
    SIMM32_32_64 = 26,
    SIMM16_32_32 = 27,
    JIMM8 = 28,
    JIMM16 = 29,
    JIMM32 = 30,
    JIMM64 = 31,
    JIMM16_32_64 = 32,
    JIMM32_32_64 = 33,
    JIMM16_32_32 = 34,
}

pub const OPERAND_ENCODING_MAX_VALUE: usize = 34;

/// Defines the `ZydisOperandVisibility` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum OperandVisibility {
    INVALID = 0,
    /// The operand is explicitly encoded in the instruction.
    EXPLICIT = 1,
    /// The operand is part of the opcode, but listed as an operand.
    IMPLICIT = 2,
    /// The operand is part of the opcode, and not typically listed as an operand.
    HIDDEN = 3,
}

pub const OPERAND_VISIBILITY_MAX_VALUE: usize = 3;

/// Defines the `ZydisInstructionEncoding` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum InstructionEncoding {
    /// The instruction uses the legacy encoding.
    LEGACY = 0,
    /// The instruction uses the AMD 3DNow-encoding.
    _3DNOW = 1,
    /// The instruction uses the AMD XOP-encoding.
    XOP = 2,
    /// The instruction uses the VEX-encoding.
    VEX = 3,
    /// The instruction uses the EVEX-encoding.
    EVEX = 4,
    /// The instruction uses the MVEX-encoding.
    MVEX = 5,
}

pub const INSTRUCTION_ENCODING_MAX_VALUE: usize = 5;

/// Defines the `ZydisOpcodeMap` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum OpcodeMap {
    DEFAULT = 0,
    _0F = 1,
    _0F38 = 2,
    _0F3A = 3,
    MAP4 = 4,
    MAP5 = 5,
    MAP6 = 6,
    MAP7 = 7,
    _0F0F = 8,
    XOP8 = 9,
    XOP9 = 10,
    XOPA = 11,
}

pub const OPCODE_MAP_MAX_VALUE: usize = 11;

/// Defines the `ZydisRegister` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum Register {
    NONE = 0,
    AL = 1,
    CL = 2,
    DL = 3,
    BL = 4,
    AH = 5,
    CH = 6,
    DH = 7,
    BH = 8,
    SPL = 9,
    BPL = 10,
    SIL = 11,
    DIL = 12,
    R8B = 13,
    R9B = 14,
    R10B = 15,
    R11B = 16,
    R12B = 17,
    R13B = 18,
    R14B = 19,
    R15B = 20,
    AX = 21,
    CX = 22,
    DX = 23,
    BX = 24,
    SP = 25,
    BP = 26,
    SI = 27,
    DI = 28,
    R8W = 29,
    R9W = 30,
    R10W = 31,
    R11W = 32,
    R12W = 33,
    R13W = 34,
    R14W = 35,
    R15W = 36,
    EAX = 37,
    ECX = 38,
    EDX = 39,
    EBX = 40,
    ESP = 41,
    EBP = 42,
    ESI = 43,
    EDI = 44,
    R8D = 45,
    R9D = 46,
    R10D = 47,
    R11D = 48,
    R12D = 49,
    R13D = 50,
    R14D = 51,
    R15D = 52,
    RAX = 53,
    RCX = 54,
    RDX = 55,
    RBX = 56,
    RSP = 57,
    RBP = 58,
    RSI = 59,
    RDI = 60,
    R8 = 61,
    R9 = 62,
    R10 = 63,
    R11 = 64,
    R12 = 65,
    R13 = 66,
    R14 = 67,
    R15 = 68,
    ST0 = 69,
    ST1 = 70,
    ST2 = 71,
    ST3 = 72,
    ST4 = 73,
    ST5 = 74,
    ST6 = 75,
    ST7 = 76,
    X87CONTROL = 77,
    X87STATUS = 78,
    X87TAG = 79,
    MM0 = 80,
    MM1 = 81,
    MM2 = 82,
    MM3 = 83,
    MM4 = 84,
    MM5 = 85,
    MM6 = 86,
    MM7 = 87,
    XMM0 = 88,
    XMM1 = 89,
    XMM2 = 90,
    XMM3 = 91,
    XMM4 = 92,
    XMM5 = 93,
    XMM6 = 94,
    XMM7 = 95,
    XMM8 = 96,
    XMM9 = 97,
    XMM10 = 98,
    XMM11 = 99,
    XMM12 = 100,
    XMM13 = 101,
    XMM14 = 102,
    XMM15 = 103,
    XMM16 = 104,
    XMM17 = 105,
    XMM18 = 106,
    XMM19 = 107,
    XMM20 = 108,
    XMM21 = 109,
    XMM22 = 110,
    XMM23 = 111,
    XMM24 = 112,
    XMM25 = 113,
    XMM26 = 114,
    XMM27 = 115,
    XMM28 = 116,
    XMM29 = 117,
    XMM30 = 118,
    XMM31 = 119,
    YMM0 = 120,
    YMM1 = 121,
    YMM2 = 122,
    YMM3 = 123,
    YMM4 = 124,
    YMM5 = 125,
    YMM6 = 126,
    YMM7 = 127,
    YMM8 = 128,
    YMM9 = 129,
    YMM10 = 130,
    YMM11 = 131,
    YMM12 = 132,
    YMM13 = 133,
    YMM14 = 134,
    YMM15 = 135,
    YMM16 = 136,
    YMM17 = 137,
    YMM18 = 138,
    YMM19 = 139,
    YMM20 = 140,
    YMM21 = 141,
    YMM22 = 142,
    YMM23 = 143,
    YMM24 = 144,
    YMM25 = 145,
    YMM26 = 146,
    YMM27 = 147,
    YMM28 = 148,
    YMM29 = 149,
    YMM30 = 150,
    YMM31 = 151,
    ZMM0 = 152,
    ZMM1 = 153,
    ZMM2 = 154,
    ZMM3 = 155,
    ZMM4 = 156,
    ZMM5 = 157,
    ZMM6 = 158,
    ZMM7 = 159,
    ZMM8 = 160,
    ZMM9 = 161,
    ZMM10 = 162,
    ZMM11 = 163,
    ZMM12 = 164,
    ZMM13 = 165,
    ZMM14 = 166,
    ZMM15 = 167,
    ZMM16 = 168,
    ZMM17 = 169,
    ZMM18 = 170,
    ZMM19 = 171,
    ZMM20 = 172,
    ZMM21 = 173,
    ZMM22 = 174,
    ZMM23 = 175,
    ZMM24 = 176,
    ZMM25 = 177,
    ZMM26 = 178,
    ZMM27 = 179,
    ZMM28 = 180,
    ZMM29 = 181,
    ZMM30 = 182,
    ZMM31 = 183,
    TMM0 = 184,
    TMM1 = 185,
    TMM2 = 186,
    TMM3 = 187,
    TMM4 = 188,
    TMM5 = 189,
    TMM6 = 190,
    TMM7 = 191,
    FLAGS = 192,
    EFLAGS = 193,
    RFLAGS = 194,
    IP = 195,
    EIP = 196,
    RIP = 197,
    ES = 198,
    CS = 199,
    SS = 200,
    DS = 201,
    FS = 202,
    GS = 203,
    GDTR = 204,
    LDTR = 205,
    IDTR = 206,
    TR = 207,
    TR0 = 208,
    TR1 = 209,
    TR2 = 210,
    TR3 = 211,
    TR4 = 212,
    TR5 = 213,
    TR6 = 214,
    TR7 = 215,
    CR0 = 216,
    CR1 = 217,
    CR2 = 218,
    CR3 = 219,
    CR4 = 220,
    CR5 = 221,
    CR6 = 222,
    CR7 = 223,
    CR8 = 224,
    CR9 = 225,
    CR10 = 226,
    CR11 = 227,
    CR12 = 228,
    CR13 = 229,
    CR14 = 230,
    CR15 = 231,
    DR0 = 232,
    DR1 = 233,
    DR2 = 234,
    DR3 = 235,
    DR4 = 236,
    DR5 = 237,
    DR6 = 238,
    DR7 = 239,
    DR8 = 240,
    DR9 = 241,
    DR10 = 242,
    DR11 = 243,
    DR12 = 244,
    DR13 = 245,
    DR14 = 246,
    DR15 = 247,
    K0 = 248,
    K1 = 249,
    K2 = 250,
    K3 = 251,
    K4 = 252,
    K5 = 253,
    K6 = 254,
    K7 = 255,
    BND0 = 256,
    BND1 = 257,
    BND2 = 258,
    BND3 = 259,
    BNDCFG = 260,
    BNDSTATUS = 261,
    MXCSR = 262,
    PKRU = 263,
    XCR0 = 264,
    UIF = 265,
}

pub const REGISTER_MAX_VALUE: usize = 265;

/// Defines the `ZydisRegisterKind` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum RegisterKind {
    INVALID = 0,
    GPR = 1,
    X87 = 2,
    MMX = 3,
    VR = 4,
    TMM = 5,
    SEGMENT = 6,
    TEST = 7,
    CONTROL = 8,
    DEBUG = 9,
    MASK = 10,
    BOUND = 11,
}

pub const REGKIND_MAX_VALUE: usize = 11;

/// Defines the `ZydisRegisterClass` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum RegisterClass {
    INVALID = 0,
    /// 8-bit general-purpose registers.
    GPR8 = 1,
    /// 16-bit general-purpose registers.
    GPR16 = 2,
    /// 32-bit general-purpose registers.
    GPR32 = 3,
    /// 64-bit general-purpose registers.
    GPR64 = 4,
    /// Floating point legacy registers.
    X87 = 5,
    /// Floating point multimedia registers.
    MMX = 6,
    /// 128-bit vector registers.
    XMM = 7,
    /// 256-bit vector registers.
    YMM = 8,
    /// 512-bit vector registers.
    ZMM = 9,
    /// Matrix registers.
    TMM = 10,
    /// Matrix registers.
    FLAGS = 11,
    /// Instruction-pointer registers.
    IP = 12,
    /// Segment registers.
    SEGMENT = 13,
    /// Table registers.
    TABLE = 14,
    /// Test registers.
    TEST = 15,
    /// Control registers.
    CONTROL = 16,
    /// Debug registers.
    DEBUG = 17,
    /// Mask registers.
    MASK = 18,
    /// Bound registers.
    BOUND = 19,
}

pub const REGCLASS_MAX_VALUE: usize = 19;

/// Defines the `ZydisMemoryOperandType` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum MemoryOperandType {
    INVALID = 0,
    /// Normal memory operand.
    MEM = 1,
    /// The memory operand is only used for address-generation. No real memory-access is caused.
    AGEN = 2,
    /// A memory operand using `SIB` addressing form, where the index register is not used in address calculation and scale is ignored. No real memory-access is caused.
    MIB = 3,
    /// A vector `SIB` memory addressing operand (`VSIB`).
    VSIB = 4,
}

pub const MEMOP_TYPE_MAX_VALUE: usize = 4;

/// Defines the `ZydisBranchType` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum BranchType {
    /// The instruction is not a branch instruction.
    NONE = 0,
    /// The instruction is a short (8-bit) branch instruction.
    SHORT = 1,
    /// The instruction is a near (16-bit or 32-bit) branch instruction.
    NEAR = 2,
    /// The instruction is a far (inter-segment) branch instruction.
    FAR = 3,
}

pub const BRANCH_TYPE_MAX_VALUE: usize = 3;

/// Defines the `ZydisExceptionClass` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum ExceptionClass {
    NONE = 0,
    SSE1 = 1,
    SSE2 = 2,
    SSE3 = 3,
    SSE4 = 4,
    SSE5 = 5,
    SSE7 = 6,
    AVX1 = 7,
    AVX2 = 8,
    AVX3 = 9,
    AVX4 = 10,
    AVX5 = 11,
    AVX6 = 12,
    AVX7 = 13,
    AVX8 = 14,
    AVX11 = 15,
    AVX12 = 16,
    E1 = 17,
    E1NF = 18,
    E2 = 19,
    E2NF = 20,
    E3 = 21,
    E3NF = 22,
    E4 = 23,
    E4NF = 24,
    E5 = 25,
    E5NF = 26,
    E6 = 27,
    E6NF = 28,
    E7NM = 29,
    E7NM128 = 30,
    E9NF = 31,
    E10 = 32,
    E10NF = 33,
    E11 = 34,
    E11NF = 35,
    E12 = 36,
    E12NP = 37,
    K20 = 38,
    K21 = 39,
    AMXE1 = 40,
    AMXE2 = 41,
    AMXE3 = 42,
    AMXE4 = 43,
    AMXE5 = 44,
    AMXE6 = 45,
}

pub const EXCEPTION_CLASS_MAX_VALUE: usize = 45;

/// Defines the `ZydisMaskMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum MaskMode {
    INVALID = 0,
    /// Masking is disabled for the current instruction (`K0` register is used).
    DISABLED = 1,
    /// The embedded mask register is used as a merge-mask.
    MERGING = 2,
    /// The embedded mask register is used as a zero-mask.
    ZEROING = 3,
    /// The embedded mask register is used as a control-mask (element selector).
    CONTROL = 4,
    /// The embedded mask register is used as a zeroing control-mask (element selector).
    CONTROL_ZEROING = 5,
}

pub const MASK_MODE_MAX_VALUE: usize = 5;

/// Defines the `ZydisBroadcastMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum BroadcastMode {
    INVALID = 0,
    _1_TO_2 = 1,
    _1_TO_4 = 2,
    _1_TO_8 = 3,
    _1_TO_16 = 4,
    _1_TO_32 = 5,
    _1_TO_64 = 6,
    _2_TO_4 = 7,
    _2_TO_8 = 8,
    _2_TO_16 = 9,
    _4_TO_8 = 10,
    _4_TO_16 = 11,
    _8_TO_16 = 12,
}

pub const BROADCAST_MODE_MAX_VALUE: usize = 12;

/// Defines the `ZydisRoundingMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum RoundingMode {
    INVALID = 0,
    /// Round to nearest.
    RN = 1,
    /// Round down.
    RD = 2,
    /// Round up.
    RU = 3,
    /// Round towards zero.
    RZ = 4,
}

pub const ROUNDING_MODE_MAX_VALUE: usize = 4;

/// Defines the `ZydisSwizzleMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum SwizzleMode {
    INVALID = 0,
    DCBA = 1,
    CDAB = 2,
    BADC = 3,
    DACB = 4,
    AAAA = 5,
    BBBB = 6,
    CCCC = 7,
    DDDD = 8,
}

pub const SWIZZLE_MODE_MAX_VALUE: usize = 8;

/// Defines the `ZydisConversionMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum ConversionMode {
    INVALID = 0,
    FLOAT16 = 1,
    SINT8 = 2,
    UINT8 = 3,
    SINT16 = 4,
    UINT16 = 5,
}

pub const CONVERSION_MODE_MAX_VALUE: usize = 5;

/// Defines the `ZydisPrefixType` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum PrefixType {
    /// The prefix is ignored by the instruction.
    IGNORED = 0,
    /// The prefix is effectively used by the instruction.
    EFFECTIVE = 1,
    /// The prefix is used as a mandatory prefix.
    MANDATORY = 2,
}

pub const PREFIX_TYPE_MAX_VALUE: usize = 2;

/// Defines the `ZydisDecoderMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum DecoderMode {
    /// Enables minimal instruction decoding without semantic analysis.
    MINIMAL = 0,
    /// Enables the `AMD`-branch mode.
    AMD_BRANCHES = 1,
    /// Enables `KNC` compatibility-mode.
    KNC = 2,
    /// Enables the `MPX` mode.
    MPX = 3,
    /// Enables the `CET` mode.
    CET = 4,
    /// Enables the `LZCNT` mode.
    LZCNT = 5,
    /// Enables the `TZCNT` mode.
    TZCNT = 6,
    /// Enables the `WBNOINVD` mode.
    WBNOINVD = 7,
    /// Enables the `CLDEMOTE` mode.
    CLDEMOTE = 8,
    /// Enables the `IPREFETCH` mode.
    IPREFETCH = 9,
    /// Enables the `UD0` compatibility mode.
    UD0_COMPAT = 10,
}

pub const DECODER_MODE_MAX_VALUE: usize = 10;

/// Defines possible physical instruction encodings as bit flags, so multiple acceptable encodings can be specified simultaneously.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum EncodableEncoding {
    DEFAULT = 0,
    LEGACY = 1,
    _3DNOW = 2,
    XOP = 4,
    VEX = 8,
    EVEX = 16,
    MVEX = 32,
}

pub const ENCODABLE_ENCODING_MAX_VALUE: usize = 63;

/// Defines encodable physical/effective sizes of relative immediate operands. See `ZydisEncoderRequest.branch_width` for more details.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum BranchWidth {
    NONE = 0,
    _8 = 1,
    _16 = 2,
    _32 = 3,
    _64 = 4,
}

pub const BRANCH_WIDTH_MAX_VALUE: usize = 4;

/// Defines possible values for address size hints. See `ZydisEncoderRequest` for more information about address size hints.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum AddressSizeHint {
    NONE = 0,
    _16 = 1,
    _32 = 2,
    _64 = 3,
}

pub const ADDRESS_SIZE_HINT_MAX_VALUE: usize = 3;

/// Defines possible values for operand size hints. See `ZydisEncoderRequest` for more information about operand size hints.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum OperandSizeHint {
    NONE = 0,
    _8 = 1,
    _16 = 2,
    _32 = 3,
    _64 = 4,
}

pub const OPERAND_SIZE_HINT_MAX_VALUE: usize = 4;

/// Enum selecting the syntax to format the disassembly in.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum FormatterStyle {
    /// Generates `AT&T`-style disassembly.
    ATT = 0,
    /// Generates `Intel`-style disassembly.
    INTEL = 1,
    /// Generates `MASM`-style disassembly that is directly accepted as input for the `MASM` assembler.
    INTEL_MASM = 2,
}

pub const FORMATTER_STYLE_MAX_VALUE: usize = 2;

/// We wrap this in a nicer rust enum `FormatterProperty` already,
/// use that instead.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum ZydisFormatterProperty {
    /// Controls the printing of effective operand-size suffixes (`AT&T`) or operand-sizes of memory operands (`INTEL`).
    FORCE_SIZE = 0,
    /// Controls the printing of segment prefixes.
    FORCE_SEGMENT = 1,
    /// Controls the printing of the scale-factor component for memory operands.
    FORCE_SCALE_ONE = 2,
    /// Controls the printing of branch addresses.
    FORCE_RELATIVE_BRANCHES = 3,
    /// Controls the printing of `EIP`/`RIP`-relative addresses.
    FORCE_RELATIVE_RIPREL = 4,
    /// Controls the printing of branch-instructions sizes.
    PRINT_BRANCH_SIZE = 5,
    /// Controls the printing of instruction prefixes.
    DETAILED_PREFIXES = 6,
    /// Controls the base of address values.
    ADDR_BASE = 7,
    /// Controls the signedness of relative addresses. Absolute addresses are always unsigned.
    ADDR_SIGNEDNESS = 8,
    /// Controls the padding of absolute address values.
    ADDR_PADDING_ABSOLUTE = 9,
    /// Controls the padding of relative address values.
    ADDR_PADDING_RELATIVE = 10,
    /// Controls the base of displacement values.
    DISP_BASE = 11,
    /// Controls the signedness of displacement values.
    DISP_SIGNEDNESS = 12,
    /// Controls the padding of displacement values.
    DISP_PADDING = 13,
    /// Controls the base of immediate values.
    IMM_BASE = 14,
    /// Controls the signedness of immediate values.
    IMM_SIGNEDNESS = 15,
    /// Controls the padding of immediate values.
    IMM_PADDING = 16,
    /// Controls the letter-case for prefixes.
    UPPERCASE_PREFIXES = 17,
    /// Controls the letter-case for the mnemonic.
    UPPERCASE_MNEMONIC = 18,
    /// Controls the letter-case for registers.
    UPPERCASE_REGISTERS = 19,
    /// Controls the letter-case for typecasts.
    UPPERCASE_TYPECASTS = 20,
    /// Controls the letter-case for decorators.
    UPPERCASE_DECORATORS = 21,
    /// Controls the prefix for decimal values.
    DEC_PREFIX = 22,
    /// Controls the suffix for decimal values.
    DEC_SUFFIX = 23,
    /// Controls the letter-case of hexadecimal values.
    HEX_UPPERCASE = 24,
    /// Controls whether to prepend hexadecimal values with a leading zero if the first character is non-numeric.
    HEX_FORCE_LEADING_NUMBER = 25,
    /// Controls the prefix for hexadecimal values.
    HEX_PREFIX = 26,
    /// Controls the suffix for hexadecimal values.
    HEX_SUFFIX = 27,
}

pub const FORMATTER_PROP_MAX_VALUE: usize = 27;

/// Enum defining different mantissae to be used during formatting.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum NumericBase {
    /// Decimal system.
    DEC = 0,
    /// Hexadecimal system.
    HEX = 1,
}

pub const NUMERIC_BASE_MAX_VALUE: usize = 1;

/// Enum defining the signeness of integers to be used during formatting.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum Signedness {
    /// Automatically choose the most suitable mode based on the operands ZydisDecodedOperand.imm.is_signed` attribute.
    AUTO = 0,
    /// Force signed values.
    SIGNED = 1,
    /// Force unsigned values.
    UNSIGNED = 2,
}

pub const SIGNEDNESS_MAX_VALUE: usize = 2;

/// Enum definining magic values that receive special treatment when used as padding properties of the formatter.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum Padding {
    /// Disables padding.
    DISABLED = 0,
    /// Padds the value to the current stack-width for addresses, or to the operand-width for immediate values (hexadecimal only).
    AUTO = -1,
}

/// Enum selecting a formatter function to be replaced with hooks.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum FormatterFunction {
    /// This function is invoked before the formatter formats an instruction.
    PRE_INSTRUCTION = 0,
    /// This function is invoked after the formatter formatted an instruction.
    POST_INSTRUCTION = 1,
    /// This function refers to the main formatting function.
    FORMAT_INSTRUCTION = 2,
    /// This function is invoked before the formatter formats an operand.
    PRE_OPERAND = 3,
    /// This function is invoked after the formatter formatted an operand.
    POST_OPERAND = 4,
    /// This function is invoked to format a register operand.
    FORMAT_OPERAND_REG = 5,
    /// This function is invoked to format a memory operand.
    FORMAT_OPERAND_MEM = 6,
    /// This function is invoked to format a pointer operand.
    FORMAT_OPERAND_PTR = 7,
    /// This function is invoked to format an immediate operand.
    FORMAT_OPERAND_IMM = 8,
    /// This function is invoked to print the instruction mnemonic.
    PRINT_MNEMONIC = 9,
    /// This function is invoked to print a register.
    PRINT_REGISTER = 10,
    /// This function is invoked to print absolute addresses.
    PRINT_ADDRESS_ABS = 11,
    /// This function is invoked to print relative addresses.
    PRINT_ADDRESS_REL = 12,
    /// This function is invoked to print a memory displacement value.
    PRINT_DISP = 13,
    /// This function is invoked to print an immediate value.
    PRINT_IMM = 14,
    /// This function is invoked to print the size of a memory operand (`INTEL` only).
    PRINT_TYPECAST = 15,
    /// This function is invoked to print the segment-register of a memory operand.
    PRINT_SEGMENT = 16,
    /// This function is invoked to print the instruction prefixes.
    PRINT_PREFIXES = 17,
    /// This function is invoked after formatting an operand to print a `EVEX`/`MVEX` decorator.
    PRINT_DECORATOR = 18,
}

pub const FORMATTER_FUNC_MAX_VALUE: usize = 18;

/// Enum of all decorator types.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum Decorator {
    INVALID = 0,
    /// The embedded-mask decorator.
    MASK = 1,
    /// The broadcast decorator.
    BC = 2,
    /// The rounding-control decorator.
    RC = 3,
    /// The suppress-all-exceptions decorator.
    SAE = 4,
    /// The register-swizzle decorator.
    SWIZZLE = 5,
    /// The conversion decorator.
    CONVERSION = 6,
    /// The eviction-hint decorator.
    EH = 7,
}

pub const DECORATOR_MAX_VALUE: usize = 7;

/// Defines the `ZydisInstructionSegment` struct.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum InstructionSegment {
    NONE = 0,
    /// The legacy prefixes (including ignored `REX` prefixes).
    PREFIXES = 1,
    /// The effective `REX` prefix byte.
    REX = 2,
    /// The `XOP` prefix bytes.
    XOP = 3,
    /// The `VEX` prefix bytes.
    VEX = 4,
    /// The `EVEX` prefix bytes.
    EVEX = 5,
    /// The `MVEX` prefix bytes.
    MVEX = 6,
    /// The opcode bytes.
    OPCODE = 7,
    /// The `ModRM` byte.
    MODRM = 8,
    /// The `SIB` byte.
    SIB = 9,
    /// The displacement bytes.
    DISPLACEMENT = 10,
    /// The immediate bytes.
    IMMEDIATE = 11,
}

pub const INSTR_SEGMENT_MAX_VALUE: usize = 11;

/// Defines the `ZydisFeature` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum Feature {
    DECODER = 0,
    ENCODER = 1,
    FORMATTER = 2,
    AVX512 = 3,
    KNC = 4,
    SEGMENT = 5,
}

pub const FEATURE_MAX_VALUE: usize = 5;
